logging:
  level:
    org:
      springframework:
        security: debug

spring:
  application:
    name: fefu
  config:
    import: optional:file:.env
  datasource:
    driver-class-name: ${DEFAULT.DB_DRIVER_NAME}
    url: ${DEFAULT.DB_URL}
    username: ${DEFAULT.DB_USERNAME}
    password: ${DEFAULT.DB_PASSWORD}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
            client-secret: ${SOCIAL.GOOGLE.SECRET}
            scope:
              - email
              - profile
          kakao:
            client-id: ${SOCIAL.KAKAO.CLIENT_ID}
            client-secret: ${SOCIAL.KAKAO.SECRET}
            client-authentication-method: client_secret_post # 쿼리스트링으로 client-id, client-secret 날아간다.
            authorization-grant-type: authorization_code # 권한부여 유형 ( 인가코드 > access-token 을 받는 방식 )
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # redirect_uri: http://localhost:8080/login/oauth2/code/kakao 위와 같음.
            scope:
              - profile_nickname
              - profile_image
            client-name: Kakao
          naver:
            client-id: ${SOCIAL.NAVER.CLIENT_ID}
            client-secret: ${SOCIAL.NAVER.SECRET}
            client-authentication-method: client_secret_post # 쿼리스트링으로 client-id, client-secret 날아간다.
            authorization-grant-type: authorization_code # 권한부여 유형 ( 인가코드 > access-token 을 받는 방식 )
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            # redirect_uri: http://localhost:8080/login/oauth2/code/kakao 위와 같음.
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header #사용자 정보를 가져올 때 토큰을 보내는 방법 , 속성값(header, form, query), header 가 기본값
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #소셜 로그인 버튼을 눌렀을 때 이동할 URL
            token-uri: https://nid.naver.com/oauth2.0/token #사용자 서비스 서버가 Redirect URI 로 전달받은 (인가 코드)로 (액세스 토큰)을 요청하는 URI
            user-info-uri: https://openapi.naver.com/v1/nid/me #서비스 서버가 발급받은 액세스 토큰으로 사용자 정보를 가져오는 URI 입니다.
            user-name-attribute: response
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQLDialect
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 30MB

mybatis:
  mapper-locations: mappers/**/*.xml

server:
  port: 8080
  servlet:
    encoding:
      force-response: true
springdoc:
  swagger-ui:
    path: ${SWAGGER_PATH}
    operations-sorter: method
    default-model-expand-depth: 10
  cache:
    disabled: true
  api-docs:
    version: openapi_3_1

file:
  directory: ${DEFAULT.FILE_DIRECTORY}

app:
  jwt:
    # JWT만들 때 사용하는 열쇠(암호화) > 나중에 복호화 할때도 사용
    #secret: DaeguGreenArtAcademyClass502RoomForJavaSpringBootFightingD23sdfsdf23FDSADFSDFDass502RoomForJavaSprinass502RoomForJavaSprin
    secret: ${JWT_SECRET}

    #front-back 간 JWT받는 헤더 키 이름
    header-schema-name: authorization

    #토큰의 종류: Bearer 는 JWT or OAuth(소셜로그인 때 사용)를 의미
    token-type: Bearer

    #AT - 만료시간(ms) - 30분
    # access-token-expiry: 1_800_000
    # access-token-expiry: 30_000 #30초
    # access-token-expiry: 60_000 #1분
    access-token-expiry: 1_296_000_000 #20초

    #RT - 만료시간(ms) - 15일
    refresh-token-cookie-name: refresh-token
    refresh-token-expiry: 1_296_000_000
  oauth2:
    base-uri: /oauth2/authorization
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-seconds: 180
    authorized-redirect-uris:
      - http://localhost:3000/oauth/redirect
      - http://localhost:8080/oauth/redirect
      - http://192.168.0.144:5121/oauth/redirect
      - http://112.222.157.156:5121/oauth/redirect
      - http://192.168.0.144:5121

coolsms:
  api:
    key: ${COOLSMS.API_KEY}
    secret: ${COOLSMS.SECRET_KEY}
    caller: ${COOLSMS.PHONE_NUMBER}

management:
  endpoint: #엔드포인트 (URL)
    health:
      show-details: always #/actuator/health의 디테일한 정보를 표시
    shutdown:
      enabled: true

  endpoints: #전체 엔드포인트 세팅
    web:
      exposure:
        include: "*" #actuator의 모든 엔드포인트를 웹에 노출
  info: #엔드포인트이지만 endpoint아래에 있지 않고, management아래에 위치
    java:
      enabled: true
    os:
      enabled: true
    env:
      enabled: true

---

spring:
  config:
    activate:
      on-profile: tdd
  datasource:
    url: ${TDD_DB_URL}
    username: ${TDD_DB_USERNAME}
    password: ${TDD_DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver
  sql:
    init:
      mode: always

---

spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${PROD.DB_URL}
    username: ${PROD.DB_USERNAME}
    password: ${PROD.DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: none
file:
  directory: ${PROD.FILE_DIRECTORY}